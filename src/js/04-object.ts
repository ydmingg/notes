// 对象
import template from "template";

const pages = ()=>{
    //一、对象object：一种引用数据类型，可以保持多个不同数据类型的属性
        //1.分类：内建对象（内部）、宿主对象（运行环境提供的对象BOM\DOM）、自定义对象
        //2.添加：obj.属性名 = 属性值 （obj["属性名"] = 属性值）
        //3.删除：delete obj.属性名（delete obj["属性名"]）
        //4.修改：obj.age = 32（obj.age++）直接赋值。
        //5.查找：obj.属性名（没有属性返回undefined）

    //二、基本数据类型和引用数据类型
        //1.基本数据类型：
            const type1 = [String, Boolean, Number, undefined,null]
                // 变量直接保存值，
                // 变量和值之间相互独立
            //2.复杂数据类型：
            const type2 =  [Object]
                // 变量保存对象的引用（内存地址）
                // 多个变量指向同一个对象，修改对象属性会影响其他变量
                // 比较变量时，基本类型比较 值，引用类型比较 地址+值
    
    //三、对象的方法 obj.fun();
        // 如果某个属性值是函数，则它也被称为对象的 “方法”。    
        // 对象.方法();
        // 函数名()    
        // 对象的遍历：for...in...
    
    //四、深浅拷贝：    
        // 只针对Object,Array这样的复杂对象
        // 区别：拷贝一层或者多层对象的属性
            // 浅拷贝：
                // 对于字符串类型，浅拷贝是对值的复制
                // 对于对象类型，继承原对象地址，修改对象属性会影响其他对象
                // 方法：
                    // 拷贝对象：Object.assgin() / 展开运算符 {...obj} 拷贝对象
                    // 拷贝数组：Array.prototype.concat() 或者 [...arr]
                    // 使用 for...in... 循环也可实现对象的浅拷贝。

            // 深拷贝：
                // 对于字符串类型，浅拷贝是对值的复制
                // 对于对象类型，开辟新栈，地址相互独立，修改对象属性不会影响另一个对象
                // 方法：
                    // 通过递归实现深拷贝
                    // lodash的cloneDeep
                    // 通过JSON.stringify()实现


    //五、对象是引用类型值
        // 不能用 var obj2 = obj1 这样的语法拷贝一个对象。
        // 使用 == 或者 === 进行对象的比较时，比较的是它们是否为内存中的同一个对象，而不是比较值是否相同。


}

export default pages;